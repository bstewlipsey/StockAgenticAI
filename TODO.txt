# === Agentic Stock AI - Automated Trading Activation TODO Progress ===

## COMPLETED TASKS (from previous updates)

- Modular bot files exist in correct locations.
- `main.py` instantiates `OrchestratorBot` and starts the trading loop.
- Data structures are centralized in `data_structures.py` and used for inter-bot communication.
- System-level and API-specific configs are in `config.py`; trading strategy and bot-specific parameters are in `config_trading.py`.
- AssetScreenerBot loads its parameters from `config_trading.py`.
- PortfolioBot, RiskManager, PositionSizerBot, and TradeExecutorBot use centralized config values.
- Logging and error handling are present in all major bots.
- Unit and integration test files exist.
- BacktesterBot, AssetScreenerBot, and ReflectionBot are implemented and referenced in tests.
- DatabaseBot schema supports reflection insights, screening results, and RAG context.
- Default values are documented in config files.
- All strategy-related parameters for DecisionMakerBot and ReflectionBot are now loaded from `config_trading.py`.
- All bots dynamically load their configuration from config files.
- Core RAG/inter-agent data structures (`NewsArticle`, `TradingSignal`, `MarketSnapshot`) are defined in `data_structures.py`.
- NewsRetrieverBot is fully implemented and integrated (API, chunking, embedding, similarity search, LLM context augmentation).
- NEWS_API_KEY is in `.env` and loaded in `config.py`.
- NewsRetrieverBot is integrated into OrchestratorBot and DecisionMakerBot receives RAG context.
- All relevant unit, integration, and regression tests pass (including for NewsRetrieverBot and ReflectionBot).
- All logging/print statements are ASCII-safe.
- All performance metrics (e.g., `win_rate`) are floats.
- `TradeOutcome` construction is fixed to always include `pnl_percent`.
- All strict requirements concerning file placement and naming conventions are met.

## OUTSTANDING TASKS (Prioritized for Automated Trading)

### Phase 1: Debugging Crypto Trading Flow - Data & Screening (Highest Priority)

- [x] **1.1. Enhance `AssetScreenerBot` Logging for Crypto Specifics:**
      - Logging added for considered crypto symbols, raw data, criteria, and exclusion reasons in `bot_asset_screener.py`.
- [x] **1.2. Review and Adjust `AssetScreenerBot` Crypto Parameters in `config_trading.py`:**
      - Separate `MIN_MARKET_CAP_CRYPTO` and `MIN_VOLUME_CRYPTO` added and documented in `config_trading.py`.
- [x] **1.3. Robustify 24/7 Crypto Data Fetching:**
      - Aggressive error handling, exponential backoff, and logging for rate limits, empty data, and network issues implemented in `bot_crypto.py`.

### Phase 2: Debugging AI Analysis & Decision Making for Crypto

- [x] **2.1. Enhance `DecisionMakerBot` Logging for Crypto Analysis:**
      - Logging added for crypto analysis: symbol, action, confidence, and reasoning in `bot_decision_maker.py`.
- [x] **2.2. Review `config_trading.py` for `DecisionMakerBot` Crypto Bias:**
      - Examined and separated parameters like `confidence_boost_factors`, `risk_penalty_factors`, and `filters_enabled` for crypto and stocks in `config_trading.py` to avoid bias. LLM prompt template is already crypto-aware.

### Phase 3: Validating Trade Execution Logic for Both Crypto & Stock

- [x] **3.1. Enhance `PositionSizerBot` and `RiskManagerBot` Logging:**
      - In `bot_position_sizer.py`, log the inputs (e.g., current price, available capital, risk tolerance) and the calculated `position_size` for *each* asset, explicitly noting if it's crypto or stock. Log if `position_size` is `0` and why.
      - In `bot_risk_manager.py`, log every risk check performed and, if a trade is **rejected**, state the precise reason (e.g., "max daily loss exceeded," "individual asset risk limit breached," "allocation too small for current price").
- [x] **3.2. Review and Adjust `config_trading.py` for Sizing and Risk Parameters (Crypto & Stock):**
      - Verified that parameters like `MIN_TRADE_VALUE`, `MAX_ASSET_ALLOCATION`, `DAILY_RISK_LIMIT`, and `TRANSACTION_FEES` are set appropriately for both asset classes in `config_trading.py`.
- [x] **3.3. Verify `TradeExecutorBot` Success/Failure Logging:**
      - Robust logging in `bot_trade_executor.py` confirms:
          - It successfully receives trade requests for both crypto and stock.
          - It attempts to execute the trade.
          - It logs the *final outcome* of the trade execution (success or detailed failure message from the exchange API).

### Phase 4: Continuous Monitoring & Automated Trading Activation

- [x] **4.1. Implement Comprehensive Real-time Monitoring & Alerts:**
      - Real-time log monitor and alert system implemented in `bot_visualizer.py`. Monitors trading.log for no trades, repeated failures, API rate limits, and drawdowns.
- [ ] **4.2. Conduct Extended Paper Trading/Simulation:**
      - Before deploying with live funds, run your system in a paper trading or simulation environment for an extended period (e.g., several days to weeks).
      - Verify that all components interact as expected, trades are executed correctly, and the portfolio is managed according to your strategy for *both* crypto and stock.
- [ ] **4.3. Continuous Performance Monitoring and Reflection:**
      - Regularly review your system's performance metrics (`win_rate`, `pnl_percent`, `max_drawdown`, etc.).
      - Actively use `ReflectionBot` to analyze past trades, identify patterns, and generate insights.
      - Based on reflection insights, manually (or eventually, automatically) fine-tune parameters in `config_trading.py` or refine the LLM's prompts to improve trading strategy and overall bot performance.

---

# --- STRICT REQUIREMENTS (DO NOT REMOVE) ---
- All configuration must be in `config.py` (system/API) and `config_trading.py` (strategy/bot). create new configuration file if needed
- All shared data structures must be in `data_structures.py`.
- All bot files must remain in the project root and follow the naming convention `bot_<purpose>.py`.
- All new configuration or data structure files must be placed in the project root.
- All test files must be named `test_*.py` and placed in the project root.
- Do not move or rename existing files unless explicitly required.

# --- End of TODO ---